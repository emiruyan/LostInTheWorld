//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameFolders/Scripts/Concretes/Inputs/DefaultAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LostInTheWorld.Inputs
{
    public partial class @DefaultAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultAction"",
    ""maps"": [
        {
            ""name"": ""Robot"",
            ""id"": ""494002d8-0270-4669-9650-05c5895ff640"",
            ""actions"": [
                {
                    ""name"": ""RobotUp"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e0168cc2-9175-4f47-9d36-a14ab2775a47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RobotRotator"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ff8eddd5-1a25-445e-85d7-547c70692310"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1dded46e-ad6c-467d-862d-5ae08bbc4288"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RobotUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""461ec02c-754a-4afc-b688-79739e0839d0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RobotRotator"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""de0aab8b-2a65-4ddc-9a13-8c914de41121"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RobotRotator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""07e33667-79e2-4943-868f-9d31bad081ba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RobotRotator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Robot
            m_Robot = asset.FindActionMap("Robot", throwIfNotFound: true);
            m_Robot_RobotUp = m_Robot.FindAction("RobotUp", throwIfNotFound: true);
            m_Robot_RobotRotator = m_Robot.FindAction("RobotRotator", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Robot
        private readonly InputActionMap m_Robot;
        private IRobotActions m_RobotActionsCallbackInterface;
        private readonly InputAction m_Robot_RobotUp;
        private readonly InputAction m_Robot_RobotRotator;
        public struct RobotActions
        {
            private @DefaultAction m_Wrapper;
            public RobotActions(@DefaultAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @RobotUp => m_Wrapper.m_Robot_RobotUp;
            public InputAction @RobotRotator => m_Wrapper.m_Robot_RobotRotator;
            public InputActionMap Get() { return m_Wrapper.m_Robot; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RobotActions set) { return set.Get(); }
            public void SetCallbacks(IRobotActions instance)
            {
                if (m_Wrapper.m_RobotActionsCallbackInterface != null)
                {
                    @RobotUp.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnRobotUp;
                    @RobotUp.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnRobotUp;
                    @RobotUp.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnRobotUp;
                    @RobotRotator.started -= m_Wrapper.m_RobotActionsCallbackInterface.OnRobotRotator;
                    @RobotRotator.performed -= m_Wrapper.m_RobotActionsCallbackInterface.OnRobotRotator;
                    @RobotRotator.canceled -= m_Wrapper.m_RobotActionsCallbackInterface.OnRobotRotator;
                }
                m_Wrapper.m_RobotActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @RobotUp.started += instance.OnRobotUp;
                    @RobotUp.performed += instance.OnRobotUp;
                    @RobotUp.canceled += instance.OnRobotUp;
                    @RobotRotator.started += instance.OnRobotRotator;
                    @RobotRotator.performed += instance.OnRobotRotator;
                    @RobotRotator.canceled += instance.OnRobotRotator;
                }
            }
        }
        public RobotActions @Robot => new RobotActions(this);
        public interface IRobotActions
        {
            void OnRobotUp(InputAction.CallbackContext context);
            void OnRobotRotator(InputAction.CallbackContext context);
        }
    }
}
